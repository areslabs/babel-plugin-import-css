var path = require('path')
var fse = require('fs-extra')
const utils = require('./util')
const createStylefromCode = utils.createStylefromCode
const convertStylesToRNCSS = utils.convertStylesToRNCSS

function defaultResolve(src, file) {
    return path.resolve(path.dirname(file), src)
}



var resolve

/**
 * React native canâ€™t use the Webpack loaders, this plugin to make .css files importable in RN.
 * In addition, we made some improvements to improve the runtime performance
 * @param opt
 * @returns
 */
function main(opt) {
    var t = opt.types
    var template = opt.template

    return {
        manipulateOptions: function (rp) {
            var resolveModuleSource = rp.resolveModuleSource
            resolve =  resolveModuleSource || defaultResolve
        },

        visitor: {
            ImportDeclaration: {
                exit: function (curPath, state) {
                    var opts = state.opts
                    var file = state.file


                    var importPath = curPath.node.source.value
                    var jsFilename = file.opts.filename

                    if (importPath.endsWith('.css')) {
                        const env = process.env.BABEL_ENV || process.env.NODE_ENV || 'development'
                        if (env === 'development') {
                            devHandler(curPath, importPath, jsFilename)
                        } else {
                            prodHandler(curPath, opts, importPath, jsFilename, template, t)
                        }
                    }
                }
            }
        }
    }
}

/**
 * In development, we just modify the import path, target file will be generated by 'cssWatch'
 * @param curPath
 * @param importPath
 * @param jsFilename
 */
function devHandler(curPath, importPath, jsFilename) {
    var absPath = resolve(importPath, jsFilename)

    var projectDir = path.resolve(require.resolve('./index.js'), '..', '..', '..', '..', '..')

    absPath = absPath.replace(projectDir, '@areslabs/babel-plugin-import-css/rncsscache')
    curPath.node.source.value = (absPath + '.js')
}

/**
 *  In prod, the js's object which is generated by the ralated css file will write directly in the js file.
 * @param curPath
 * @param opts
 * @param importPath
 * @param jsFilename
 * @param template
 * @param t
 */
function prodHandler(curPath, opts, importPath, jsFilename, template, t){
    var absPath = resolve(importPath, jsFilename)

    const cssStr = fse.readFileSync(absPath).toString()
    const {styles: obj} = createStylefromCode(cssStr, absPath)
    const cssObj = convertStylesToRNCSS(obj)

    var defautIdenti = curPath.node.specifiers[0].local.name
    const buildNode = template('const STYLES = STYOBJ;', { sourceType: 'module' })
    const styleExpre = buildNode({
        STYLES: t.identifier(defautIdenti),
        STYOBJ: t.identifier(cssObj)
    })

    curPath.replaceWith(styleExpre)
}

module.exports = main